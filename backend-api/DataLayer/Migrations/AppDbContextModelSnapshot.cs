// <auto-generated />
using System;
using HrManagementSystem.DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hr.DL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HrManagementSystem.DataLayer.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsManager")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "22e40406-8a9d-2d82-912c-5d6a640ee696",
                            AccessFailedCount = 0,
                            CompanyId = 1,
                            ConcurrencyStamp = "4d473127-700a-447c-81fb-8a0faf77cb09",
                            Email = "admin@techvista.com",
                            EmailConfirmed = true,
                            FirstName = "Sistem",
                            IsManager = true,
                            LastName = "Yöneticisi",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@TECHVISTA.COM",
                            NormalizedUserName = "ADMIN@TECHVISTA.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECHmq9M56zs/82DHd9w+eIimgX6+o7v78YdjyAavjMbf1Rp+mQLDz5lF+7MNHdHsmA==",
                            PhoneNumberConfirmed = false,
                            Position = "Sistem Yöneticisi",
                            RefreshToken = "",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "c0401c8e-fe17-4f84-b17f-83b1e9a07fb8",
                            TwoFactorEnabled = false,
                            UserName = "admin@techvista.com"
                        },
                        new
                        {
                            Id = "22e40406-8a9d-2d82-912c-5d6a640ee001",
                            AccessFailedCount = 0,
                            CompanyId = 2,
                            ConcurrencyStamp = "486f6e24-aa0c-491b-8220-d2a265b13307",
                            Email = "berk.yılmaz@example.com",
                            EmailConfirmed = true,
                            FirstName = "Berk",
                            IsManager = true,
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "BERK.YILMAZ@EXAMPLE.COM",
                            NormalizedUserName = "BERK.YILMAZ@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFssGRgfzf6y47Xel3J0S1Hrbu6YUPmsH+2qH8pfu/dBSQUuZ1DRZJ0nGMc9rYKO6Q==",
                            PhoneNumberConfirmed = false,
                            Position = "Genel Müdür",
                            RefreshToken = "",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "b56eeb26-efa3-4388-bff8-34846d2bc7e7",
                            TwoFactorEnabled = false,
                            UserName = "berk.yılmaz@example.com"
                        },
                        new
                        {
                            Id = "22e40406-8a9d-2d82-912c-5d6a640ee002",
                            AccessFailedCount = 0,
                            CompanyId = 2,
                            ConcurrencyStamp = "2867b835-1b45-4a0b-b8d8-8408500cb89c",
                            Email = "elif.öztürk@example.com",
                            EmailConfirmed = true,
                            FirstName = "Elif",
                            IsManager = false,
                            LastName = "Öztürk",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELİF.ÖZTÜRK@EXAMPLE.COM",
                            NormalizedUserName = "ELİF.ÖZTÜRK@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEG45J50KmlGz4xw85ao+vDp9um7eq2nyPiS4gCqUDDFfMZgkCGlTxodngU39B+xCrw==",
                            PhoneNumberConfirmed = false,
                            Position = "Yazılım Mühendisi",
                            RefreshToken = "",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "ca456769-1d38-4928-991b-aeac0cbd2289",
                            TwoFactorEnabled = false,
                            UserName = "elif.öztürk@example.com"
                        },
                        new
                        {
                            Id = "22e40406-8a9d-2d82-912c-5d6a640ee003",
                            AccessFailedCount = 0,
                            CompanyId = 2,
                            ConcurrencyStamp = "7f8066ee-0a75-4185-b7bc-a1bffaec5759",
                            Email = "can.kaya@example.com",
                            EmailConfirmed = true,
                            FirstName = "Can",
                            IsManager = false,
                            LastName = "Kaya",
                            LockoutEnabled = false,
                            NormalizedEmail = "CAN.KAYA@EXAMPLE.COM",
                            NormalizedUserName = "CAN.KAYA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGpXLjUn9mNkM/Xi6AnuSfKhjxSeAaZ18zrS2oocpCevoINZj3eAgGLB60bAd7wBIg==",
                            PhoneNumberConfirmed = false,
                            Position = "Yazılım Mimarı",
                            RefreshToken = "",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "cf6747d2-e25e-474b-b1cc-04a41d24d4ae",
                            TwoFactorEnabled = false,
                            UserName = "can.kaya@example.com"
                        },
                        new
                        {
                            Id = "22e40406-8a9d-2d82-912c-5d6a640ee004",
                            AccessFailedCount = 0,
                            CompanyId = 2,
                            ConcurrencyStamp = "62efc5f4-d888-4059-b581-e574b50d9ea4",
                            Email = "deniz.aydın@example.com",
                            EmailConfirmed = true,
                            FirstName = "Deniz",
                            IsManager = false,
                            LastName = "Aydın",
                            LockoutEnabled = false,
                            NormalizedEmail = "DENİZ.AYDIN@EXAMPLE.COM",
                            NormalizedUserName = "DENİZ.AYDIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEsEti2uuDKyVvXUdyBZfMXPJzJH2DBS0f9M14bdExvpZCzC8SKo80vEi0z2vajNug==",
                            PhoneNumberConfirmed = false,
                            Position = "İK Uzmanı",
                            RefreshToken = "",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "dddb716c-333c-43e8-80f2-1e124a47047c",
                            TwoFactorEnabled = false,
                            UserName = "deniz.aydın@example.com"
                        },
                        new
                        {
                            Id = "22e40406-8a9d-2d82-912c-5d6a640ee005",
                            AccessFailedCount = 0,
                            CompanyId = 2,
                            ConcurrencyStamp = "ab26ca1f-ba83-4693-8737-d2895427353d",
                            Email = "emre.çelik@example.com",
                            EmailConfirmed = true,
                            FirstName = "Emre",
                            IsManager = true,
                            LastName = "Çelik",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMRE.ÇELİK@EXAMPLE.COM",
                            NormalizedUserName = "EMRE.ÇELİK@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGTu1MlwJwbL39Fa6yF1L2gWajCyWdlFCfA/jR6WFh2GAgKRSh3k/Gwlt8pGFJwHwg==",
                            PhoneNumberConfirmed = false,
                            Position = "İK Müdürü",
                            RefreshToken = "",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "15f4ad87-e3d6-468f-9958-5f7c809ae4df",
                            TwoFactorEnabled = false,
                            UserName = "emre.çelik@example.com"
                        },
                        new
                        {
                            Id = "22e40406-8a9d-2d82-912c-5d6a640ee006",
                            AccessFailedCount = 0,
                            CompanyId = 3,
                            ConcurrencyStamp = "69bd6efe-3dad-4e2a-9f5c-58b5222fbd51",
                            Email = "furkan.demir@example.com",
                            EmailConfirmed = true,
                            FirstName = "Furkan",
                            IsManager = false,
                            LastName = "Demir",
                            LockoutEnabled = false,
                            NormalizedEmail = "FURKAN.DEMİR@EXAMPLE.COM",
                            NormalizedUserName = "FURKAN.DEMİR@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIXC5pchMMzK88sC7Aq7gulQkZbTMTm4VONfo2RT2f+tFqs4TuNy9iOBY2e3/62iUQ==",
                            PhoneNumberConfirmed = false,
                            Position = "Veri Analisti",
                            RefreshToken = "",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "79b881de-f279-4d1b-a2be-2b748ba98fed",
                            TwoFactorEnabled = false,
                            UserName = "furkan.demir@example.com"
                        },
                        new
                        {
                            Id = "22e40406-8a9d-2d82-912c-5d6a640ee007",
                            AccessFailedCount = 0,
                            CompanyId = 3,
                            ConcurrencyStamp = "25273522-e957-46ad-a297-876f6d8e03e1",
                            Email = "gizem.arslan@example.com",
                            EmailConfirmed = true,
                            FirstName = "Gizem",
                            IsManager = false,
                            LastName = "Arslan",
                            LockoutEnabled = false,
                            NormalizedEmail = "GİZEM.ARSLAN@EXAMPLE.COM",
                            NormalizedUserName = "GİZEM.ARSLAN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEI/W92WheX28ExAfkLhPcKcETXmGHd7w638sV+skKMC30g5f0cF4ivXa4f026hfdZQ==",
                            PhoneNumberConfirmed = false,
                            Position = "Veri Bilimci",
                            RefreshToken = "",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "868d758b-e7cb-4b31-a3cc-7710a69c7299",
                            TwoFactorEnabled = false,
                            UserName = "gizem.arslan@example.com"
                        },
                        new
                        {
                            Id = "22e40406-8a9d-2d82-912c-5d6a640ee008",
                            AccessFailedCount = 0,
                            CompanyId = 3,
                            ConcurrencyStamp = "6758ed8c-c0fc-408b-abd4-00500c70c6f9",
                            Email = "hakan.yıldırım@example.com",
                            EmailConfirmed = true,
                            FirstName = "Hakan",
                            IsManager = false,
                            LastName = "Yıldırım",
                            LockoutEnabled = false,
                            NormalizedEmail = "HAKAN.YILDIRIM@EXAMPLE.COM",
                            NormalizedUserName = "HAKAN.YILDIRIM@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN8RRB5kKQIBmwL/JcUSVJ55/8eaJix5PG9GE4R+RKq7GTgqwrpeBGH+74G0xEc67w==",
                            PhoneNumberConfirmed = false,
                            Position = "Müşteri Hizmetleri Temsilcisi",
                            RefreshToken = "",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "37508fc2-c8be-447c-9f44-a7b5f993da57",
                            TwoFactorEnabled = false,
                            UserName = "hakan.yıldırım@example.com"
                        },
                        new
                        {
                            Id = "22e40406-8a9d-2d82-912c-5d6a640ee009",
                            AccessFailedCount = 0,
                            CompanyId = 3,
                            ConcurrencyStamp = "e9c49d3d-aafb-499b-868a-1889c590b024",
                            Email = "irem.koç@example.com",
                            EmailConfirmed = true,
                            FirstName = "İrem",
                            IsManager = true,
                            LastName = "Koç",
                            LockoutEnabled = false,
                            NormalizedEmail = "İREM.KOÇ@EXAMPLE.COM",
                            NormalizedUserName = "İREM.KOÇ@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDEncuv++cujt+RVk5aNfKTDhEoHR6zPHWueilmbbrZN+AMqXX8J5UjUXpP3BS46+A==",
                            PhoneNumberConfirmed = false,
                            Position = "Müşteri İlişkileri Müdürü",
                            RefreshToken = "",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "170d3728-244f-487c-89e9-753ce27fdfa0",
                            TwoFactorEnabled = false,
                            UserName = "irem.koç@example.com"
                        },
                        new
                        {
                            Id = "22e40406-8a9d-2d82-912c-5d6a640ee010",
                            AccessFailedCount = 0,
                            CompanyId = 4,
                            ConcurrencyStamp = "451ec943-e343-4295-bafb-1bc83af25e74",
                            Email = "kerem.özer@example.com",
                            EmailConfirmed = true,
                            FirstName = "Kerem",
                            IsManager = true,
                            LastName = "Özer",
                            LockoutEnabled = false,
                            NormalizedEmail = "KEREM.ÖZER@EXAMPLE.COM",
                            NormalizedUserName = "KEREM.ÖZER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIfBo5uhLtaMXPH8RyQGaaos7fqPNXpilSOa2KpTlc9Z/j8v2FQenfPytor6QYnKew==",
                            PhoneNumberConfirmed = false,
                            Position = "Bulut Mimarı",
                            RefreshToken = "",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "cd45fd8c-6314-4be3-9b47-2ed8573fc755",
                            TwoFactorEnabled = false,
                            UserName = "kerem.özer@example.com"
                        },
                        new
                        {
                            Id = "22e40406-8a9d-2d82-912c-5d6a640ee011",
                            AccessFailedCount = 0,
                            CompanyId = 4,
                            ConcurrencyStamp = "f25fd927-dc8b-41aa-8ae5-c39c0b63cd5f",
                            Email = "leyla.şahin@example.com",
                            EmailConfirmed = true,
                            FirstName = "Leyla",
                            IsManager = false,
                            LastName = "Şahin",
                            LockoutEnabled = false,
                            NormalizedEmail = "LEYLA.ŞAHİN@EXAMPLE.COM",
                            NormalizedUserName = "LEYLA.ŞAHİN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAua0INe2+jwtzuACpYsVQ0lje2XvYJQPZZyuZ2iFYBvW/6H7PqHWb53i750UMgl5w==",
                            PhoneNumberConfirmed = false,
                            Position = "DevOps Mühendisi",
                            RefreshToken = "",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "a9b74b57-9a44-46a6-9986-0a2c19cd30be",
                            TwoFactorEnabled = false,
                            UserName = "leyla.şahin@example.com"
                        },
                        new
                        {
                            Id = "22e40406-8a9d-2d82-912c-5d6a640ee012",
                            AccessFailedCount = 0,
                            CompanyId = 4,
                            ConcurrencyStamp = "7b371fd1-6c1f-4c71-be1f-0f68ee003217",
                            Email = "murat.akar@example.com",
                            EmailConfirmed = true,
                            FirstName = "Murat",
                            IsManager = true,
                            LastName = "Akar",
                            LockoutEnabled = false,
                            NormalizedEmail = "MURAT.AKAR@EXAMPLE.COM",
                            NormalizedUserName = "MURAT.AKAR@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELkGR6/nFm2pPyVQWcwQRm1AMK1pLhWkxiHPmMpSOL+Zb8sOxiTIOHWh8IIUzOpDSg==",
                            PhoneNumberConfirmed = false,
                            Position = "Proje Yöneticisi",
                            RefreshToken = "",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "0e531025-c902-44a0-ac91-c05964daed7a",
                            TwoFactorEnabled = false,
                            UserName = "murat.akar@example.com"
                        },
                        new
                        {
                            Id = "22e40406-8a9d-2d82-912c-5d6a640ee013",
                            AccessFailedCount = 0,
                            CompanyId = 4,
                            ConcurrencyStamp = "60686d35-7a2e-4e1c-805b-70e803bed833",
                            Email = "neslihan.güneş@example.com",
                            EmailConfirmed = true,
                            FirstName = "Neslihan",
                            IsManager = false,
                            LastName = "Güneş",
                            LockoutEnabled = false,
                            NormalizedEmail = "NESLİHAN.GÜNEŞ@EXAMPLE.COM",
                            NormalizedUserName = "NESLİHAN.GÜNEŞ@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMKb8wOii1FxwKWs/TwiVvVzuTulqjtxdP5p+8Bm9odAA1+wSkRsXHS47yXuCYzyXg==",
                            PhoneNumberConfirmed = false,
                            Position = "UX/UI Tasarımcısı",
                            RefreshToken = "",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "d6c63b87-0a2e-4a25-baec-370d9597aab4",
                            TwoFactorEnabled = false,
                            UserName = "neslihan.güneş@example.com"
                        });
                });

            modelBuilder.Entity("HrManagementSystem.DataLayer.Entities.Certification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateIssued")
                        .HasColumnType("datetime2");

                    b.Property<string>("Issuer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("Certifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateIssued = new DateTime(2018, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Issuer = "PMI",
                            Name = "PMP (Project Management Professional)",
                            ResumeId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateIssued = new DateTime(2019, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Issuer = "Amazon Web Services",
                            Name = "AWS Certified Solutions Architect",
                            ResumeId = 2
                        },
                        new
                        {
                            Id = 3,
                            DateIssued = new DateTime(2020, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Issuer = "The Open Group",
                            Name = "TOGAF Certified",
                            ResumeId = 3
                        },
                        new
                        {
                            Id = 4,
                            DateIssued = new DateTime(2017, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Issuer = "SHRM",
                            Name = "SHRM-CP (Certified Professional)",
                            ResumeId = 4
                        },
                        new
                        {
                            Id = 5,
                            DateIssued = new DateTime(2019, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Issuer = "HRCI",
                            Name = "SPHR (Senior Professional in Human Resources)",
                            ResumeId = 5
                        },
                        new
                        {
                            Id = 6,
                            DateIssued = new DateTime(2021, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Issuer = "Google",
                            Name = "TensorFlow Developer Certificate",
                            ResumeId = 6
                        },
                        new
                        {
                            Id = 7,
                            DateIssued = new DateTime(2020, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Issuer = "INFORMS",
                            Name = "Certified Analytics Professional",
                            ResumeId = 7
                        },
                        new
                        {
                            Id = 8,
                            DateIssued = new DateTime(2022, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Issuer = "CXPA",
                            Name = "CCXP (Certified Customer Experience Professional)",
                            ResumeId = 8
                        },
                        new
                        {
                            Id = 9,
                            DateIssued = new DateTime(2019, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Issuer = "ICMI",
                            Name = "CCSP (Certified Customer Service Professional)",
                            ResumeId = 9
                        },
                        new
                        {
                            Id = 10,
                            DateIssued = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Issuer = "Google",
                            Name = "Google Cloud Professional Cloud Architect",
                            ResumeId = 10
                        },
                        new
                        {
                            Id = 11,
                            DateIssued = new DateTime(2022, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Issuer = "The Linux Foundation",
                            Name = "Certified Kubernetes Administrator",
                            ResumeId = 11
                        },
                        new
                        {
                            Id = 12,
                            DateIssued = new DateTime(2020, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Issuer = "PMI",
                            Name = "PMI-ACP (Agile Certified Practitioner)",
                            ResumeId = 12
                        },
                        new
                        {
                            Id = 13,
                            DateIssued = new DateTime(2021, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Issuer = "Adobe",
                            Name = "Adobe Certified Expert - Experience Designer",
                            ResumeId = 13
                        });
                });

            modelBuilder.Entity("HrManagementSystem.DataLayer.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("EstablishmentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubscriptionEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Levent Mah. İş Cad. No: 5, Beşiktaş, İstanbul",
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 46, 839, DateTimeKind.Utc).AddTicks(9701),
                            Email = "info@techvista.com",
                            EmployeeCount = 1,
                            EstablishmentDate = new DateTime(2022, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = true,
                            Name = "TechVista Solutions",
                            PhoneNumber = "+90 212 555 1234",
                            RegistrationDate = new DateTime(2022, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubscriptionEndDate = new DateTime(2028, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 46, 839, DateTimeKind.Utc).AddTicks(9704)
                        },
                        new
                        {
                            Id = 2,
                            Address = "Bahçelievler Mah. Teknoloji Cad. No: 42, Çankaya, Ankara",
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 46, 839, DateTimeKind.Utc).AddTicks(9728),
                            Email = "contact@innovatech.com",
                            EmployeeCount = 6,
                            EstablishmentDate = new DateTime(2012, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = true,
                            Name = "InnovaTech Yazılım A.Ş.",
                            PhoneNumber = "+90 312 444 5678",
                            RegistrationDate = new DateTime(2023, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubscriptionEndDate = new DateTime(2024, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 46, 839, DateTimeKind.Utc).AddTicks(9728)
                        },
                        new
                        {
                            Id = 3,
                            Address = "Alsancak Mah. Veri Sok. No: 15, Konak, İzmir",
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 46, 839, DateTimeKind.Utc).AddTicks(9732),
                            Email = "info@datasphere.com",
                            EmployeeCount = 4,
                            EstablishmentDate = new DateTime(2017, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = true,
                            Name = "DataSphere Bilişim Ltd. Şti.",
                            PhoneNumber = "+90 232 333 9876",
                            RegistrationDate = new DateTime(2023, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubscriptionEndDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 46, 839, DateTimeKind.Utc).AddTicks(9732)
                        },
                        new
                        {
                            Id = 4,
                            Address = "Esentepe Mah. Bulut Cad. No: 78, Şişli, İstanbul",
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 46, 839, DateTimeKind.Utc).AddTicks(9736),
                            Email = "info@cloudpeak.com",
                            EmployeeCount = 5,
                            EstablishmentDate = new DateTime(2019, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApproved = true,
                            Name = "CloudPeak Teknoloji A.Ş.",
                            PhoneNumber = "+90 216 777 5432",
                            RegistrationDate = new DateTime(2023, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubscriptionEndDate = new DateTime(2024, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 46, 839, DateTimeKind.Utc).AddTicks(9736)
                        });
                });

            modelBuilder.Entity("HrManagementSystem.DataLayer.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 1,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 46, 839, DateTimeKind.Utc).AddTicks(9960),
                            Description = "Şirket stratejik yönetimi",
                            Name = "Yönetim Kurulu",
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 46, 839, DateTimeKind.Utc).AddTicks(9960)
                        },
                        new
                        {
                            Id = 2,
                            CompanyId = 2,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 46, 839, DateTimeKind.Utc).AddTicks(9971),
                            Description = "Yazılım araştırma ve geliştirme departmanı",
                            Name = "Ar-Ge",
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 46, 839, DateTimeKind.Utc).AddTicks(9971)
                        },
                        new
                        {
                            Id = 3,
                            CompanyId = 2,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 46, 839, DateTimeKind.Utc).AddTicks(9973),
                            Description = "Personel yönetimi ve işe alım departmanı",
                            Name = "İnsan Kaynakları",
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 46, 839, DateTimeKind.Utc).AddTicks(9973)
                        },
                        new
                        {
                            Id = 4,
                            CompanyId = 2,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 46, 839, DateTimeKind.Utc).AddTicks(9975),
                            Description = "Finansal işlemler ve raporlama departmanı",
                            Name = "Muhasebe",
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 46, 839, DateTimeKind.Utc).AddTicks(9975)
                        },
                        new
                        {
                            Id = 5,
                            CompanyId = 3,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 46, 839, DateTimeKind.Utc).AddTicks(9976),
                            Description = "Büyük veri analizi ve raporlama departmanı",
                            Name = "Veri Analizi",
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 46, 839, DateTimeKind.Utc).AddTicks(9977)
                        },
                        new
                        {
                            Id = 6,
                            CompanyId = 3,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 46, 839, DateTimeKind.Utc).AddTicks(9980),
                            Description = "Müşteri hizmetleri ve destek departmanı",
                            Name = "Müşteri İlişkileri",
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 46, 839, DateTimeKind.Utc).AddTicks(9980)
                        },
                        new
                        {
                            Id = 7,
                            CompanyId = 3,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 46, 839, DateTimeKind.Utc).AddTicks(9982),
                            Description = "IT altyapı ve güvenlik yönetimi departmanı",
                            Name = "Sistem Yönetimi",
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 46, 839, DateTimeKind.Utc).AddTicks(9982)
                        },
                        new
                        {
                            Id = 8,
                            CompanyId = 4,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 46, 839, DateTimeKind.Utc).AddTicks(9983),
                            Description = "Bulut tabanlı çözümler geliştirme departmanı",
                            Name = "Bulut Hizmetleri",
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 46, 839, DateTimeKind.Utc).AddTicks(9984)
                        },
                        new
                        {
                            Id = 9,
                            CompanyId = 4,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 46, 839, DateTimeKind.Utc).AddTicks(9985),
                            Description = "Yazılım proje yönetimi departmanı",
                            Name = "Proje Yönetimi",
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 46, 839, DateTimeKind.Utc).AddTicks(9986)
                        },
                        new
                        {
                            Id = 10,
                            CompanyId = 4,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 46, 839, DateTimeKind.Utc).AddTicks(9987),
                            Description = "Yeni ürün geliştirme ve tasarım departmanı",
                            Name = "Ürün Geliştirme",
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 46, 839, DateTimeKind.Utc).AddTicks(9988)
                        });
                });

            modelBuilder.Entity("HrManagementSystem.DataLayer.Entities.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FieldOfStudy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("Educations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Degree = "Yüksek Lisans",
                            EndDate = new DateTime(2010, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FieldOfStudy = "Bilgisayar Mühendisliği",
                            ResumeId = 1,
                            SchoolName = "İstanbul Teknik Üniversitesi",
                            StartDate = new DateTime(2008, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Degree = "Lisans",
                            EndDate = new DateTime(2014, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FieldOfStudy = "Yazılım Mühendisliği",
                            ResumeId = 2,
                            SchoolName = "Boğaziçi Üniversitesi",
                            StartDate = new DateTime(2010, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Degree = "Doktora",
                            EndDate = new DateTime(2016, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FieldOfStudy = "Bilgisayar Bilimleri",
                            ResumeId = 3,
                            SchoolName = "Orta Doğu Teknik Üniversitesi",
                            StartDate = new DateTime(2012, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Degree = "Lisans",
                            EndDate = new DateTime(2015, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FieldOfStudy = "İnsan Kaynakları Yönetimi",
                            ResumeId = 4,
                            SchoolName = "Marmara Üniversitesi",
                            StartDate = new DateTime(2011, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            Degree = "Yüksek Lisans",
                            EndDate = new DateTime(2015, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FieldOfStudy = "İşletme",
                            ResumeId = 5,
                            SchoolName = "Yıldız Teknik Üniversitesi",
                            StartDate = new DateTime(2013, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            Degree = "Lisans",
                            EndDate = new DateTime(2016, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FieldOfStudy = "İstatistik",
                            ResumeId = 6,
                            SchoolName = "Hacettepe Üniversitesi",
                            StartDate = new DateTime(2012, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            Degree = "Yüksek Lisans",
                            EndDate = new DateTime(2017, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FieldOfStudy = "Veri Bilimi",
                            ResumeId = 7,
                            SchoolName = "Ankara Üniversitesi",
                            StartDate = new DateTime(2015, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            Degree = "Lisans",
                            EndDate = new DateTime(2017, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FieldOfStudy = "İşletme",
                            ResumeId = 8,
                            SchoolName = "Ege Üniversitesi",
                            StartDate = new DateTime(2013, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            Degree = "Yüksek Lisans",
                            EndDate = new DateTime(2016, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FieldOfStudy = "Müşteri İlişkileri Yönetimi",
                            ResumeId = 9,
                            SchoolName = "Dokuz Eylül Üniversitesi",
                            StartDate = new DateTime(2014, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            Degree = "Lisans",
                            EndDate = new DateTime(2015, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FieldOfStudy = "Bilgisayar Mühendisliği",
                            ResumeId = 10,
                            SchoolName = "Bilkent Üniversitesi",
                            StartDate = new DateTime(2011, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            Degree = "Yüksek Lisans",
                            EndDate = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FieldOfStudy = "Bilgi Teknolojileri",
                            ResumeId = 11,
                            SchoolName = "Sabancı Üniversitesi",
                            StartDate = new DateTime(2016, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            Degree = "Lisans",
                            EndDate = new DateTime(2016, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FieldOfStudy = "Endüstri Mühendisliği",
                            ResumeId = 12,
                            SchoolName = "Koç Üniversitesi",
                            StartDate = new DateTime(2012, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13,
                            Degree = "Lisans",
                            EndDate = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FieldOfStudy = "Bilgisayar Mühendisliği",
                            ResumeId = 13,
                            SchoolName = "Galatasaray Üniversitesi",
                            StartDate = new DateTime(2014, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("HrManagementSystem.DataLayer.Entities.Employee", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("EmployeeId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee001"),
                            Birthdate = new DateTime(1998, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CompanyId = 2,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 46, 970, DateTimeKind.Utc).AddTicks(842),
                            DepartmentId = 2,
                            Email = "berk.yılmaz@example.com",
                            FirstName = "Berk",
                            HireDate = new DateTime(2023, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 1,
                            LastName = "Yılmaz",
                            PhoneNumber = "+90 523 874 61 92",
                            Position = "Genel Müdür",
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 46, 970, DateTimeKind.Utc).AddTicks(850)
                        },
                        new
                        {
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee002"),
                            Birthdate = new DateTime(1985, 1, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CompanyId = 2,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 47, 69, DateTimeKind.Utc).AddTicks(4354),
                            DepartmentId = 2,
                            Email = "elif.öztürk@example.com",
                            FirstName = "Elif",
                            HireDate = new DateTime(2021, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 2,
                            LastName = "Öztürk",
                            PhoneNumber = "+90 536 630 27 99",
                            Position = "Yazılım Mühendisi",
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 47, 69, DateTimeKind.Utc).AddTicks(4360)
                        },
                        new
                        {
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee003"),
                            Birthdate = new DateTime(1987, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CompanyId = 2,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 47, 185, DateTimeKind.Utc).AddTicks(1226),
                            DepartmentId = 2,
                            Email = "can.kaya@example.com",
                            FirstName = "Can",
                            HireDate = new DateTime(2020, 2, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 3,
                            LastName = "Kaya",
                            PhoneNumber = "+90 547 826 90 33",
                            Position = "Yazılım Mimarı",
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 47, 185, DateTimeKind.Utc).AddTicks(1229)
                        },
                        new
                        {
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee004"),
                            Birthdate = new DateTime(1980, 5, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CompanyId = 2,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 47, 320, DateTimeKind.Utc).AddTicks(7010),
                            DepartmentId = 3,
                            Email = "deniz.aydın@example.com",
                            FirstName = "Deniz",
                            HireDate = new DateTime(2021, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 4,
                            LastName = "Aydın",
                            PhoneNumber = "+90 511 498 31 19",
                            Position = "İK Uzmanı",
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 47, 320, DateTimeKind.Utc).AddTicks(7014)
                        },
                        new
                        {
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee005"),
                            Birthdate = new DateTime(1983, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CompanyId = 2,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 47, 409, DateTimeKind.Utc).AddTicks(1276),
                            DepartmentId = 3,
                            Email = "emre.çelik@example.com",
                            FirstName = "Emre",
                            HireDate = new DateTime(2020, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 5,
                            LastName = "Çelik",
                            PhoneNumber = "+90 529 152 59 99",
                            Position = "İK Müdürü",
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 47, 409, DateTimeKind.Utc).AddTicks(1281)
                        },
                        new
                        {
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee006"),
                            Birthdate = new DateTime(1994, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CompanyId = 3,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 47, 500, DateTimeKind.Utc).AddTicks(9497),
                            DepartmentId = 5,
                            Email = "furkan.demir@example.com",
                            FirstName = "Furkan",
                            HireDate = new DateTime(2022, 4, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 6,
                            LastName = "Demir",
                            PhoneNumber = "+90 550 208 76 71",
                            Position = "Veri Analisti",
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 47, 500, DateTimeKind.Utc).AddTicks(9500)
                        },
                        new
                        {
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee007"),
                            Birthdate = new DateTime(1987, 2, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CompanyId = 3,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 47, 623, DateTimeKind.Utc).AddTicks(5555),
                            DepartmentId = 5,
                            Email = "gizem.arslan@example.com",
                            FirstName = "Gizem",
                            HireDate = new DateTime(2023, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 7,
                            LastName = "Arslan",
                            PhoneNumber = "+90 549 828 63 39",
                            Position = "Veri Bilimci",
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 47, 623, DateTimeKind.Utc).AddTicks(5559)
                        },
                        new
                        {
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee008"),
                            Birthdate = new DateTime(1997, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CompanyId = 3,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 47, 732, DateTimeKind.Utc).AddTicks(5302),
                            DepartmentId = 6,
                            Email = "hakan.yıldırım@example.com",
                            FirstName = "Hakan",
                            HireDate = new DateTime(2020, 5, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 8,
                            LastName = "Yıldırım",
                            PhoneNumber = "+90 516 531 60 94",
                            Position = "Müşteri Hizmetleri Temsilcisi",
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 47, 732, DateTimeKind.Utc).AddTicks(5306)
                        },
                        new
                        {
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee009"),
                            Birthdate = new DateTime(1983, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CompanyId = 3,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 47, 832, DateTimeKind.Utc).AddTicks(2024),
                            DepartmentId = 6,
                            Email = "irem.koç@example.com",
                            FirstName = "İrem",
                            HireDate = new DateTime(2022, 5, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 9,
                            LastName = "Koç",
                            PhoneNumber = "+90 530 681 46 58",
                            Position = "Müşteri İlişkileri Müdürü",
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 47, 832, DateTimeKind.Utc).AddTicks(2027)
                        },
                        new
                        {
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee010"),
                            Birthdate = new DateTime(1986, 2, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CompanyId = 4,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 47, 915, DateTimeKind.Utc).AddTicks(3275),
                            DepartmentId = 8,
                            Email = "kerem.özer@example.com",
                            FirstName = "Kerem",
                            HireDate = new DateTime(2021, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 10,
                            LastName = "Özer",
                            PhoneNumber = "+90 543 872 20 73",
                            Position = "Bulut Mimarı",
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 47, 915, DateTimeKind.Utc).AddTicks(3278)
                        },
                        new
                        {
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee011"),
                            Birthdate = new DateTime(1998, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CompanyId = 4,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 47, 987, DateTimeKind.Utc).AddTicks(3765),
                            DepartmentId = 8,
                            Email = "leyla.şahin@example.com",
                            FirstName = "Leyla",
                            HireDate = new DateTime(2021, 7, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 11,
                            LastName = "Şahin",
                            PhoneNumber = "+90 529 653 55 77",
                            Position = "DevOps Mühendisi",
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 47, 987, DateTimeKind.Utc).AddTicks(3767)
                        },
                        new
                        {
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee012"),
                            Birthdate = new DateTime(1993, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CompanyId = 4,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 58, DateTimeKind.Utc).AddTicks(4498),
                            DepartmentId = 9,
                            Email = "murat.akar@example.com",
                            FirstName = "Murat",
                            HireDate = new DateTime(2021, 2, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 12,
                            LastName = "Akar",
                            PhoneNumber = "+90 552 763 42 21",
                            Position = "Proje Yöneticisi",
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 58, DateTimeKind.Utc).AddTicks(4502)
                        },
                        new
                        {
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee013"),
                            Birthdate = new DateTime(1989, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CompanyId = 4,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 138, DateTimeKind.Utc).AddTicks(2394),
                            DepartmentId = 10,
                            Email = "neslihan.güneş@example.com",
                            FirstName = "Neslihan",
                            HireDate = new DateTime(2023, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = 13,
                            LastName = "Güneş",
                            PhoneNumber = "+90 547 763 78 90",
                            Position = "UX/UI Tasarımcısı",
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 138, DateTimeKind.Utc).AddTicks(2397)
                        });
                });

            modelBuilder.Entity("HrManagementSystem.DataLayer.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 2,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 243, DateTimeKind.Utc).AddTicks(7031),
                            Description = "Yıllık teknoloji trendleri ve inovasyon zirvesi",
                            EventDate = new DateTime(2024, 5, 15, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Teknoloji Zirvesi",
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 243, DateTimeKind.Utc).AddTicks(7035)
                        },
                        new
                        {
                            Id = 2,
                            CompanyId = 4,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 243, DateTimeKind.Utc).AddTicks(7050),
                            Description = "Yeni bulut projesinin başlangıç toplantısı",
                            EventDate = new DateTime(2024, 6, 1, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Proje Kickoff Toplantısı",
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 243, DateTimeKind.Utc).AddTicks(7067)
                        },
                        new
                        {
                            Id = 3,
                            CompanyId = 3,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 243, DateTimeKind.Utc).AddTicks(7070),
                            Description = "Güncel veri güvenliği uygulamaları hakkında seminer",
                            EventDate = new DateTime(2024, 7, 10, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Veri Güvenliği Semineri",
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 243, DateTimeKind.Utc).AddTicks(7071)
                        },
                        new
                        {
                            Id = 4,
                            CompanyId = 2,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 243, DateTimeKind.Utc).AddTicks(7074),
                            Description = "2024 yılı performans ve hedef değerlendirmesi",
                            EventDate = new DateTime(2024, 12, 20, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Yıl Sonu Değerlendirme Toplantısı",
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 243, DateTimeKind.Utc).AddTicks(7075)
                        },
                        new
                        {
                            Id = 5,
                            CompanyId = 4,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 243, DateTimeKind.Utc).AddTicks(7078),
                            Description = "Proje yönetiminde agile metodolojiler üzerine eğitim",
                            EventDate = new DateTime(2024, 8, 5, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Agile Metodolojiler Eğitimi",
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 243, DateTimeKind.Utc).AddTicks(7078)
                        },
                        new
                        {
                            Id = 6,
                            CompanyId = 3,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 243, DateTimeKind.Utc).AddTicks(7083),
                            Description = "Müşteri memnuniyetini artırma stratejileri üzerine çalıştay",
                            EventDate = new DateTime(2024, 9, 15, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Müşteri Deneyimi Çalıştayı",
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 243, DateTimeKind.Utc).AddTicks(7083)
                        },
                        new
                        {
                            Id = 7,
                            CompanyId = 2,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 243, DateTimeKind.Utc).AddTicks(7086),
                            Description = "AI kullanımında etik konular üzerine panel tartışması",
                            EventDate = new DateTime(2024, 10, 1, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Yapay Zeka ve Etik Paneli",
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 243, DateTimeKind.Utc).AddTicks(7087)
                        },
                        new
                        {
                            Id = 8,
                            CompanyId = 4,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 243, DateTimeKind.Utc).AddTicks(7090),
                            Description = "Güncel siber tehditler ve korunma yöntemleri konferansı",
                            EventDate = new DateTime(2024, 11, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Siber Güvenlik Konferansı",
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 243, DateTimeKind.Utc).AddTicks(7090)
                        });
                });

            modelBuilder.Entity("HrManagementSystem.DataLayer.Entities.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ApproverComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpenseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExpenseType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Expenses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 1500.00m,
                            ApproverComments = "Onaylandı, şirket için faydalı olacak",
                            CreatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 243, DateTimeKind.Local).AddTicks(7261),
                            Description = "Yıllık Yazılım Geliştirme Konferansı katılım ücreti",
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee001"),
                            ExpenseDate = new DateTime(2023, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpenseType = "Konferans",
                            Status = "Approved",
                            UpdatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 243, DateTimeKind.Local).AddTicks(7280)
                        },
                        new
                        {
                            Id = 2,
                            Amount = 2500.50m,
                            CreatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 243, DateTimeKind.Local).AddTicks(7288),
                            Description = "Yeni geliştirme laptopı",
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee002"),
                            ExpenseDate = new DateTime(2023, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpenseType = "Ekipman",
                            Status = "Pending",
                            UpdatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 243, DateTimeKind.Local).AddTicks(7290)
                        },
                        new
                        {
                            Id = 3,
                            Amount = 850.75m,
                            ApproverComments = "Onaylandı",
                            CreatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 243, DateTimeKind.Local).AddTicks(7296),
                            Description = "Müşteri ziyareti uçak bileti",
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee003"),
                            ExpenseDate = new DateTime(2023, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpenseType = "Seyahat",
                            Status = "Approved",
                            UpdatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 243, DateTimeKind.Local).AddTicks(7298)
                        },
                        new
                        {
                            Id = 4,
                            Amount = 1200.00m,
                            ApproverComments = "Onaylandı, kariyer gelişimi için önemli",
                            CreatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 243, DateTimeKind.Local).AddTicks(7311),
                            Description = "İnsan Kaynakları Yönetimi Sertifikası",
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee004"),
                            ExpenseDate = new DateTime(2023, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpenseType = "Eğitim",
                            Status = "Approved",
                            UpdatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 243, DateTimeKind.Local).AddTicks(7313)
                        },
                        new
                        {
                            Id = 5,
                            Amount = 3000.00m,
                            ApproverComments = "Onaylandı, gerekli yazılım",
                            CreatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 243, DateTimeKind.Local).AddTicks(7320),
                            Description = "Yıllık kurumsal yazılım lisansı yenilemesi",
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee005"),
                            ExpenseDate = new DateTime(2023, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpenseType = "Yazılım Lisansı",
                            Status = "Approved",
                            UpdatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 243, DateTimeKind.Local).AddTicks(7321)
                        },
                        new
                        {
                            Id = 6,
                            Amount = 450.25m,
                            ApproverComments = "Onaylandı",
                            CreatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 243, DateTimeKind.Local).AddTicks(7329),
                            Description = "Kırtasiye ve ofis sarf malzemeleri",
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee006"),
                            ExpenseDate = new DateTime(2023, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpenseType = "Ofis Malzemeleri",
                            Status = "Approved",
                            UpdatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 243, DateTimeKind.Local).AddTicks(7332)
                        },
                        new
                        {
                            Id = 7,
                            Amount = 300.00m,
                            CreatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 243, DateTimeKind.Local).AddTicks(7339),
                            Description = "Sektör networking etkinliği katılım ücreti",
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee007"),
                            ExpenseDate = new DateTime(2023, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpenseType = "Networking",
                            Status = "Pending",
                            UpdatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 243, DateTimeKind.Local).AddTicks(7341)
                        },
                        new
                        {
                            Id = 8,
                            Amount = 550.50m,
                            ApproverComments = "Onaylandı, iş geliştirme faaliyeti",
                            CreatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 243, DateTimeKind.Local).AddTicks(7347),
                            Description = "Potansiyel müşteri ile akşam yemeği",
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee008"),
                            ExpenseDate = new DateTime(2024, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpenseType = "Müşteri Ağırlama",
                            Status = "Approved",
                            UpdatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 243, DateTimeKind.Local).AddTicks(7349)
                        });
                });

            modelBuilder.Entity("HrManagementSystem.DataLayer.Entities.Holiday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Holidays");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 2,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 243, DateTimeKind.Utc).AddTicks(7443),
                            Date = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Yeni yıl kutlaması",
                            Name = "Yeni Yıl",
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 243, DateTimeKind.Utc).AddTicks(7443)
                        },
                        new
                        {
                            Id = 2,
                            CompanyId = 2,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 243, DateTimeKind.Utc).AddTicks(7448),
                            Date = new DateTime(2024, 4, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "23 Nisan kutlamaları",
                            Name = "Ulusal Egemenlik ve Çocuk Bayramı",
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 243, DateTimeKind.Utc).AddTicks(7449)
                        },
                        new
                        {
                            Id = 3,
                            CompanyId = 3,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 243, DateTimeKind.Utc).AddTicks(7452),
                            Date = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "1 Mayıs İşçi Bayramı",
                            Name = "Emek ve Dayanışma Günü",
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 243, DateTimeKind.Utc).AddTicks(7452)
                        },
                        new
                        {
                            Id = 4,
                            CompanyId = 3,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 243, DateTimeKind.Utc).AddTicks(7455),
                            Date = new DateTime(2024, 5, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "19 Mayıs kutlamaları",
                            Name = "Atatürk'ü Anma, Gençlik ve Spor Bayramı",
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 243, DateTimeKind.Utc).AddTicks(7457)
                        },
                        new
                        {
                            Id = 5,
                            CompanyId = 4,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 243, DateTimeKind.Utc).AddTicks(7460),
                            Date = new DateTime(2024, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "15 Temmuz anma etkinlikleri",
                            Name = "Demokrasi ve Milli Birlik Günü",
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 243, DateTimeKind.Utc).AddTicks(7461)
                        },
                        new
                        {
                            Id = 6,
                            CompanyId = 4,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 243, DateTimeKind.Utc).AddTicks(7464),
                            Date = new DateTime(2024, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "30 Ağustos kutlamaları",
                            Name = "Zafer Bayramı",
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 243, DateTimeKind.Utc).AddTicks(7465)
                        },
                        new
                        {
                            Id = 7,
                            CompanyId = 2,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 243, DateTimeKind.Utc).AddTicks(7471),
                            Date = new DateTime(2024, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "29 Ekim kutlamaları",
                            Name = "Cumhuriyet Bayramı",
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 243, DateTimeKind.Utc).AddTicks(7471)
                        });
                });

            modelBuilder.Entity("HrManagementSystem.DataLayer.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Proficiency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "İngilizce",
                            Proficiency = "İleri Düzey",
                            ResumeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "İngilizce",
                            Proficiency = "Akıcı",
                            ResumeId = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "İngilizce",
                            Proficiency = "İleri Düzey",
                            ResumeId = 3
                        },
                        new
                        {
                            Id = 4,
                            Name = "İngilizce",
                            Proficiency = "Orta Düzey",
                            ResumeId = 4
                        },
                        new
                        {
                            Id = 5,
                            Name = "İngilizce",
                            Proficiency = "İleri Düzey",
                            ResumeId = 5
                        },
                        new
                        {
                            Id = 6,
                            Name = "İngilizce",
                            Proficiency = "Akıcı",
                            ResumeId = 6
                        },
                        new
                        {
                            Id = 7,
                            Name = "İngilizce",
                            Proficiency = "İleri Düzey",
                            ResumeId = 7
                        },
                        new
                        {
                            Id = 8,
                            Name = "İngilizce",
                            Proficiency = "Orta Düzey",
                            ResumeId = 8
                        },
                        new
                        {
                            Id = 9,
                            Name = "İngilizce",
                            Proficiency = "İleri Düzey",
                            ResumeId = 9
                        },
                        new
                        {
                            Id = 10,
                            Name = "İngilizce",
                            Proficiency = "Akıcı",
                            ResumeId = 10
                        },
                        new
                        {
                            Id = 11,
                            Name = "İngilizce",
                            Proficiency = "İleri Düzey",
                            ResumeId = 11
                        },
                        new
                        {
                            Id = 12,
                            Name = "İngilizce",
                            Proficiency = "Akıcı",
                            ResumeId = 12
                        },
                        new
                        {
                            Id = 13,
                            Name = "İngilizce",
                            Proficiency = "İleri Düzey",
                            ResumeId = 13
                        });
                });

            modelBuilder.Entity("HrManagementSystem.DataLayer.Entities.Leave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("ApproverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LeaveType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApproverId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Leaves");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApproverId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee005"),
                            Comments = "İyi tatiller",
                            CreatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 243, DateTimeKind.Local).AddTicks(7613),
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee001"),
                            EndDate = new DateTime(2023, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LeaveType = "Yıllık İzin",
                            Reason = "Yaz tatili",
                            StartDate = new DateTime(2023, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Approved",
                            UpdatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 243, DateTimeKind.Local).AddTicks(7616)
                        },
                        new
                        {
                            Id = 2,
                            ApproverId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee005"),
                            Comments = "Geçmiş olsun",
                            CreatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 243, DateTimeKind.Local).AddTicks(7626),
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee002"),
                            EndDate = new DateTime(2023, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LeaveType = "Hastalık İzni",
                            Reason = "Grip",
                            StartDate = new DateTime(2023, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Approved",
                            UpdatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 243, DateTimeKind.Local).AddTicks(7628)
                        },
                        new
                        {
                            Id = 3,
                            ApproverId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee005"),
                            Comments = "Onaylandı",
                            CreatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 243, DateTimeKind.Local).AddTicks(7637),
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee003"),
                            EndDate = new DateTime(2023, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LeaveType = "Özel İzin",
                            Reason = "Aile etkinliği",
                            StartDate = new DateTime(2023, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Approved",
                            UpdatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 243, DateTimeKind.Local).AddTicks(7638)
                        },
                        new
                        {
                            Id = 4,
                            Comments = "İnceleme aşamasında",
                            CreatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 243, DateTimeKind.Local).AddTicks(7646),
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee004"),
                            EndDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LeaveType = "Yıllık İzin",
                            Reason = "Kişisel gezi",
                            StartDate = new DateTime(2023, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Pending",
                            UpdatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 243, DateTimeKind.Local).AddTicks(7648)
                        },
                        new
                        {
                            Id = 5,
                            ApproverId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee001"),
                            Comments = "Konferans raporu bekleniyor",
                            CreatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 243, DateTimeKind.Local).AddTicks(7677),
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee005"),
                            EndDate = new DateTime(2023, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LeaveType = "Konferans İzni",
                            Reason = "İK Konferansı katılımı",
                            StartDate = new DateTime(2023, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Approved",
                            UpdatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 243, DateTimeKind.Local).AddTicks(7679)
                        },
                        new
                        {
                            Id = 6,
                            ApproverId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee009"),
                            Comments = "İyi tatiller",
                            CreatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 243, DateTimeKind.Local).AddTicks(7691),
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee006"),
                            EndDate = new DateTime(2023, 12, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LeaveType = "Yıllık İzin",
                            Reason = "Yılbaşı tatili",
                            StartDate = new DateTime(2023, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Approved",
                            UpdatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 243, DateTimeKind.Local).AddTicks(7693)
                        },
                        new
                        {
                            Id = 7,
                            ApproverId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee009"),
                            Comments = "Doktor raporu alındı",
                            CreatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 243, DateTimeKind.Local).AddTicks(7704),
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee007"),
                            EndDate = new DateTime(2024, 1, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LeaveType = "Hastalık İzni",
                            Reason = "Soğuk algınlığı",
                            StartDate = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Approved",
                            UpdatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 243, DateTimeKind.Local).AddTicks(7711)
                        },
                        new
                        {
                            Id = 8,
                            Comments = "Değerlendirme aşamasında",
                            CreatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 243, DateTimeKind.Local).AddTicks(7774),
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee008"),
                            EndDate = new DateTime(2024, 2, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LeaveType = "Yıllık İzin",
                            Reason = "Kış tatili",
                            StartDate = new DateTime(2024, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Pending",
                            UpdatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 243, DateTimeKind.Local).AddTicks(7777)
                        },
                        new
                        {
                            Id = 9,
                            ApproverId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee001"),
                            Comments = "Onaylandı",
                            CreatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 243, DateTimeKind.Local).AddTicks(7791),
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee009"),
                            EndDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LeaveType = "Özel İzin",
                            Reason = "Kişisel işler",
                            StartDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Approved",
                            UpdatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 243, DateTimeKind.Local).AddTicks(7793)
                        });
                });

            modelBuilder.Entity("HrManagementSystem.DataLayer.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateRead")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SenderId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 2,
                            CreatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 243, DateTimeKind.Local).AddTicks(9965),
                            DateSent = new DateTime(2023, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee001"),
                            ExpiryDate = new DateTime(2023, 6, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Message = "Yeni proje başlatıldı: CloudSync",
                            NotificationType = "Proje",
                            Priority = "High",
                            SenderId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee005"),
                            UpdatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 243, DateTimeKind.Local).AddTicks(9970)
                        },
                        new
                        {
                            Id = 2,
                            CompanyId = 2,
                            CreatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 243, DateTimeKind.Local).AddTicks(9981),
                            DateRead = new DateTime(2023, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateSent = new DateTime(2023, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee002"),
                            ExpiryDate = new DateTime(2023, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Message = "Yıllık performans değerlendirmeleri başlıyor",
                            NotificationType = "İK",
                            Priority = "Medium",
                            SenderId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee005"),
                            UpdatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 243, DateTimeKind.Local).AddTicks(9982)
                        },
                        new
                        {
                            Id = 3,
                            CompanyId = 3,
                            CreatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 243, DateTimeKind.Local).AddTicks(9990),
                            DateSent = new DateTime(2023, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee003"),
                            ExpiryDate = new DateTime(2023, 8, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Message = "Yeni güvenlik politikası yayınlandı",
                            NotificationType = "Güvenlik",
                            Priority = "High",
                            SenderId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee009"),
                            UpdatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 243, DateTimeKind.Local).AddTicks(9991)
                        },
                        new
                        {
                            Id = 4,
                            CompanyId = 2,
                            CreatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 243, DateTimeKind.Local).AddTicks(9999),
                            DateRead = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateSent = new DateTime(2023, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee004"),
                            ExpiryDate = new DateTime(2023, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Message = "Ofis taşınma süreci başlıyor",
                            NotificationType = "Genel",
                            Priority = "Medium",
                            SenderId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee001"),
                            UpdatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 244, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 5,
                            CompanyId = 2,
                            CreatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 244, DateTimeKind.Local).AddTicks(8),
                            DateSent = new DateTime(2023, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee005"),
                            ExpiryDate = new DateTime(2023, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Message = "Yeni müşteri kazanıldı: TechCorp",
                            NotificationType = "Satış",
                            Priority = "High",
                            SenderId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee001"),
                            UpdatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 244, DateTimeKind.Local).AddTicks(9)
                        },
                        new
                        {
                            Id = 6,
                            CompanyId = 3,
                            CreatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 244, DateTimeKind.Local).AddTicks(18),
                            DateSent = new DateTime(2023, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee006"),
                            ExpiryDate = new DateTime(2023, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Message = "Yeni eğitim programı başlıyor: AI ve ML Temelleri",
                            NotificationType = "Eğitim",
                            Priority = "Medium",
                            SenderId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee005"),
                            UpdatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 244, DateTimeKind.Local).AddTicks(19)
                        },
                        new
                        {
                            Id = 7,
                            CompanyId = 4,
                            CreatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 244, DateTimeKind.Local).AddTicks(27),
                            DateRead = new DateTime(2023, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateSent = new DateTime(2023, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee007"),
                            ExpiryDate = new DateTime(2023, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Message = "Sistem bakımı planlı kesinti",
                            NotificationType = "IT",
                            Priority = "High",
                            SenderId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee010"),
                            UpdatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 244, DateTimeKind.Local).AddTicks(28)
                        },
                        new
                        {
                            Id = 8,
                            CompanyId = 3,
                            CreatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 244, DateTimeKind.Local).AddTicks(35),
                            DateSent = new DateTime(2023, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee008"),
                            ExpiryDate = new DateTime(2023, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Message = "Yılbaşı kutlaması hatırlatması",
                            NotificationType = "Etkinlik",
                            Priority = "Low",
                            SenderId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee005"),
                            UpdatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 244, DateTimeKind.Local).AddTicks(36)
                        },
                        new
                        {
                            Id = 9,
                            CompanyId = 4,
                            CreatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 244, DateTimeKind.Local).AddTicks(44),
                            DateRead = new DateTime(2024, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateSent = new DateTime(2024, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee009"),
                            ExpiryDate = new DateTime(2024, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Message = "Yeni yıl hedefleri toplantısı",
                            NotificationType = "Toplantı",
                            Priority = "Medium",
                            SenderId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee001"),
                            UpdatedAt = new DateTime(2024, 8, 31, 14, 43, 48, 244, DateTimeKind.Local).AddTicks(46)
                        });
                });

            modelBuilder.Entity("HrManagementSystem.DataLayer.Entities.Resume", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("Resumes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdditionalInformation = "10+ yıl yazılım geliştirme ve yöneticilik deneyimi",
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(168),
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee001"),
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(169)
                        },
                        new
                        {
                            Id = 2,
                            AdditionalInformation = "Full-stack geliştirici, mikroservis mimarileri konusunda uzman",
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(174),
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee002"),
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(174)
                        },
                        new
                        {
                            Id = 3,
                            AdditionalInformation = "Yazılım mimarisi ve büyük ölçekli sistemler konusunda deneyimli",
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(177),
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee003"),
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(177)
                        },
                        new
                        {
                            Id = 4,
                            AdditionalInformation = "İK süreçleri optimizasyonu ve çalışan deneyimi konularında uzman",
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(180),
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee004"),
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(180)
                        },
                        new
                        {
                            Id = 5,
                            AdditionalInformation = "Organizasyonel gelişim ve yetenek yönetimi konularında deneyimli",
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(183),
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee005"),
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(184)
                        },
                        new
                        {
                            Id = 6,
                            AdditionalInformation = "Makine öğrenmesi ve veri madenciliği alanlarında uzman",
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(187),
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee006"),
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(187)
                        },
                        new
                        {
                            Id = 7,
                            AdditionalInformation = "Büyük veri analizi ve iş zekası çözümleri konusunda deneyimli",
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(190),
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee007"),
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(190)
                        },
                        new
                        {
                            Id = 8,
                            AdditionalInformation = "Müşteri ilişkileri yönetimi ve sorun çözme becerileri güçlü",
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(193),
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee008"),
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(194)
                        },
                        new
                        {
                            Id = 9,
                            AdditionalInformation = "Müşteri memnuniyeti stratejileri geliştirme konusunda uzman",
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(196),
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee009"),
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(197)
                        },
                        new
                        {
                            Id = 10,
                            AdditionalInformation = "Bulut mimarisi ve DevOps uygulamaları konusunda ileri düzey bilgi",
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(200),
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee010"),
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(200)
                        },
                        new
                        {
                            Id = 11,
                            AdditionalInformation = "CI/CD ve konteynerizasyon teknolojileri konusunda uzman",
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(203),
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee011"),
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(203)
                        },
                        new
                        {
                            Id = 12,
                            AdditionalInformation = "Agile ve Scrum metodolojileri konusunda sertifikalı",
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(206),
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee012"),
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(206)
                        },
                        new
                        {
                            Id = 13,
                            AdditionalInformation = "Kullanıcı deneyimi tasarımı ve kullanılabilirlik testleri konusunda deneyimli",
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(226),
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee013"),
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(226)
                        });
                });

            modelBuilder.Entity("HrManagementSystem.DataLayer.Entities.Shift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShiftType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Shifts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(1662),
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee001"),
                            EndTime = new DateTime(2023, 8, 1, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "Sprint planlama toplantısı",
                            ShiftType = "Tam Gün",
                            StartTime = new DateTime(2023, 8, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(1664)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(1671),
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee002"),
                            EndTime = new DateTime(2023, 8, 2, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "Kod gözden geçirme",
                            ShiftType = "Tam Gün",
                            StartTime = new DateTime(2023, 8, 2, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(1672)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(1675),
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee003"),
                            EndTime = new DateTime(2023, 8, 3, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "Mimari tasarım toplantısı",
                            ShiftType = "Tam Gün",
                            StartTime = new DateTime(2023, 8, 3, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(1675)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(1678),
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee004"),
                            EndTime = new DateTime(2023, 8, 4, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "İşe alım görüşmeleri",
                            ShiftType = "Tam Gün",
                            StartTime = new DateTime(2023, 8, 4, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(1678)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(1681),
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee005"),
                            EndTime = new DateTime(2023, 8, 5, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "Performans değerlendirme toplantıları",
                            ShiftType = "Tam Gün",
                            StartTime = new DateTime(2023, 8, 5, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(1681)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(1686),
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee006"),
                            EndTime = new DateTime(2023, 8, 6, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "Veri analizi projesi",
                            ShiftType = "Tam Gün",
                            StartTime = new DateTime(2023, 8, 6, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(1686)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(1689),
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee007"),
                            EndTime = new DateTime(2023, 8, 7, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "Rapor hazırlama",
                            ShiftType = "Tam Gün",
                            StartTime = new DateTime(2023, 8, 7, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(1690)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(1693),
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee008"),
                            EndTime = new DateTime(2023, 8, 8, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "Müşteri destek çağrıları",
                            ShiftType = "Tam Gün",
                            StartTime = new DateTime(2023, 8, 8, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(1693)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(1696),
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee009"),
                            EndTime = new DateTime(2023, 8, 9, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "Müşteri memnuniyeti analizi",
                            ShiftType = "Tam Gün",
                            StartTime = new DateTime(2023, 8, 9, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(1696)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(1700),
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee010"),
                            EndTime = new DateTime(2023, 8, 10, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "Bulut altyapı optimizasyonu",
                            ShiftType = "Tam Gün",
                            StartTime = new DateTime(2023, 8, 10, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(1700)
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(1703),
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee011"),
                            EndTime = new DateTime(2023, 8, 11, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "CI/CD pipeline güncellemesi",
                            ShiftType = "Tam Gün",
                            StartTime = new DateTime(2023, 8, 11, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(1703)
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(1713),
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee012"),
                            EndTime = new DateTime(2023, 8, 12, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "Sprint retrospektif toplantısı",
                            ShiftType = "Tam Gün",
                            StartTime = new DateTime(2023, 8, 12, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(1713)
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(1716),
                            EmployeeId = new Guid("22e40406-8a9d-2d82-912c-5d6a640ee013"),
                            EndTime = new DateTime(2023, 8, 13, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "Kullanıcı arayüzü tasarım revizyonu",
                            ShiftType = "Tam Gün",
                            StartTime = new DateTime(2023, 8, 13, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2024, 8, 31, 11, 43, 48, 244, DateTimeKind.Utc).AddTicks(1716)
                        });
                });

            modelBuilder.Entity("HrManagementSystem.DataLayer.Entities.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Proficiency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Proje Yönetimi",
                            Proficiency = "Uzman",
                            ResumeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mikroservis Mimarileri",
                            Proficiency = "İleri Düzey",
                            ResumeId = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sistem Tasarımı",
                            Proficiency = "Uzman",
                            ResumeId = 3
                        },
                        new
                        {
                            Id = 4,
                            Name = "İşe Alım Süreçleri",
                            Proficiency = "İleri Düzey",
                            ResumeId = 4
                        },
                        new
                        {
                            Id = 5,
                            Name = "Yetenek Yönetimi",
                            Proficiency = "Uzman",
                            ResumeId = 5
                        },
                        new
                        {
                            Id = 6,
                            Name = "Makine Öğrenmesi",
                            Proficiency = "İleri Düzey",
                            ResumeId = 6
                        },
                        new
                        {
                            Id = 7,
                            Name = "Veri Analizi",
                            Proficiency = "Uzman",
                            ResumeId = 7
                        },
                        new
                        {
                            Id = 8,
                            Name = "Müşteri İlişkileri",
                            Proficiency = "İleri Düzey",
                            ResumeId = 8
                        },
                        new
                        {
                            Id = 9,
                            Name = "Müşteri Hizmetleri Stratejisi",
                            Proficiency = "Uzman",
                            ResumeId = 9
                        },
                        new
                        {
                            Id = 10,
                            Name = "Bulut Mimarisi",
                            Proficiency = "Uzman",
                            ResumeId = 10
                        },
                        new
                        {
                            Id = 11,
                            Name = "DevOps",
                            Proficiency = "İleri Düzey",
                            ResumeId = 11
                        },
                        new
                        {
                            Id = 12,
                            Name = "Agile Metodolojileri",
                            Proficiency = "Uzman",
                            ResumeId = 12
                        },
                        new
                        {
                            Id = 13,
                            Name = "UX/UI Tasarımı",
                            Proficiency = "İleri Düzey",
                            ResumeId = 13
                        });
                });

            modelBuilder.Entity("HrManagementSystem.DataLayer.Entities.WorkExperience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("WorkExperiences");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyName = "TechSoft A.Ş.",
                            Description = "Büyük ölçekli yazılım projelerini yönetti ve ekip liderliği yaptı.",
                            EndDate = new DateTime(2020, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Position = "Yazılım Geliştirme Müdürü",
                            ResumeId = 1,
                            StartDate = new DateTime(2015, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CompanyName = "CloudTech",
                            Description = "Mikroservis mimarileri üzerinde çalıştı ve DevOps süreçlerini iyileştirdi.",
                            EndDate = new DateTime(2021, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Position = "Kıdemli Yazılım Mühendisi",
                            ResumeId = 2,
                            StartDate = new DateTime(2016, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CompanyName = "DataWiz",
                            Description = "Yüksek ölçeklenebilir sistemler tasarladı ve uyguladı.",
                            EndDate = new DateTime(2022, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Position = "Yazılım Mimarı",
                            ResumeId = 3,
                            StartDate = new DateTime(2017, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CompanyName = "PeopleTech",
                            Description = "İşe alım süreçlerini optimize etti ve çalışan memnuniyetini artırdı.",
                            EndDate = new DateTime(2020, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Position = "İK Uzmanı",
                            ResumeId = 4,
                            StartDate = new DateTime(2015, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CompanyName = "TalentCorp",
                            Description = "Yetenek yönetimi stratejileri geliştirdi ve uyguladı.",
                            EndDate = new DateTime(2022, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Position = "İK Müdürü",
                            ResumeId = 5,
                            StartDate = new DateTime(2017, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            CompanyName = "AILabs",
                            Description = "Makine öğrenmesi modellerini geliştirdi ve uyguladı.",
                            EndDate = new DateTime(2023, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Position = "Veri Bilimci",
                            ResumeId = 6,
                            StartDate = new DateTime(2018, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            CompanyName = "BigDataCo",
                            Description = "Büyük veri setlerini analiz etti ve iş zekası raporları oluşturdu.",
                            EndDate = new DateTime(2022, 10, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Position = "Veri Analisti",
                            ResumeId = 7,
                            StartDate = new DateTime(2017, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            CompanyName = "CustomerFirst",
                            Description = "Müşteri sorunlarını çözdü ve müşteri memnuniyetini artırdı.",
                            EndDate = new DateTime(2023, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Position = "Müşteri Hizmetleri Temsilcisi",
                            ResumeId = 8,
                            StartDate = new DateTime(2018, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            CompanyName = "ServicePro",
                            Description = "Müşteri hizmetleri stratejilerini geliştirdi ve uyguladı.",
                            EndDate = new DateTime(2022, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Position = "Müşteri İlişkileri Müdürü",
                            ResumeId = 9,
                            StartDate = new DateTime(2016, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            CompanyName = "CloudMasters",
                            Description = "Büyük ölçekli bulut altyapıları tasarladı ve uyguladı.",
                            EndDate = new DateTime(2022, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Position = "Bulut Mimarı",
                            ResumeId = 10,
                            StartDate = new DateTime(2015, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            CompanyName = "DevOpsHub",
                            Description = "CI/CD süreçlerini otomatikleştirdi ve konteyner teknolojilerini uyguladı.",
                            EndDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Position = "DevOps Mühendisi",
                            ResumeId = 11,
                            StartDate = new DateTime(2018, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            CompanyName = "AgileWorks",
                            Description = "Agile metodolojileri kullanarak büyük projeleri yönetti.",
                            EndDate = new DateTime(2023, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Position = "Proje Yöneticisi",
                            ResumeId = 12,
                            StartDate = new DateTime(2017, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13,
                            CompanyName = "UXStudio",
                            Description = "Kullanıcı odaklı arayüzler tasarladı ve kullanılabilirlik testleri yaptı.",
                            EndDate = new DateTime(2023, 10, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Position = "UX/UI Tasarımcısı",
                            ResumeId = 13,
                            StartDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0fcba428-3c83-4ca4-b329-32bf4e78ea92",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "704f6694-7020-48f6-bd2c-10e22732c830",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "1cc7c608-0e28-4c11-8cd0-7bf6be3a7b48",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "22e40406-8a9d-2d82-912c-5d6a640ee001",
                            RoleId = "704f6694-7020-48f6-bd2c-10e22732c830"
                        },
                        new
                        {
                            UserId = "22e40406-8a9d-2d82-912c-5d6a640ee002",
                            RoleId = "1cc7c608-0e28-4c11-8cd0-7bf6be3a7b48"
                        },
                        new
                        {
                            UserId = "22e40406-8a9d-2d82-912c-5d6a640ee003",
                            RoleId = "1cc7c608-0e28-4c11-8cd0-7bf6be3a7b48"
                        },
                        new
                        {
                            UserId = "22e40406-8a9d-2d82-912c-5d6a640ee004",
                            RoleId = "1cc7c608-0e28-4c11-8cd0-7bf6be3a7b48"
                        },
                        new
                        {
                            UserId = "22e40406-8a9d-2d82-912c-5d6a640ee005",
                            RoleId = "704f6694-7020-48f6-bd2c-10e22732c830"
                        },
                        new
                        {
                            UserId = "22e40406-8a9d-2d82-912c-5d6a640ee006",
                            RoleId = "1cc7c608-0e28-4c11-8cd0-7bf6be3a7b48"
                        },
                        new
                        {
                            UserId = "22e40406-8a9d-2d82-912c-5d6a640ee007",
                            RoleId = "1cc7c608-0e28-4c11-8cd0-7bf6be3a7b48"
                        },
                        new
                        {
                            UserId = "22e40406-8a9d-2d82-912c-5d6a640ee008",
                            RoleId = "1cc7c608-0e28-4c11-8cd0-7bf6be3a7b48"
                        },
                        new
                        {
                            UserId = "22e40406-8a9d-2d82-912c-5d6a640ee009",
                            RoleId = "704f6694-7020-48f6-bd2c-10e22732c830"
                        },
                        new
                        {
                            UserId = "22e40406-8a9d-2d82-912c-5d6a640ee010",
                            RoleId = "704f6694-7020-48f6-bd2c-10e22732c830"
                        },
                        new
                        {
                            UserId = "22e40406-8a9d-2d82-912c-5d6a640ee011",
                            RoleId = "1cc7c608-0e28-4c11-8cd0-7bf6be3a7b48"
                        },
                        new
                        {
                            UserId = "22e40406-8a9d-2d82-912c-5d6a640ee012",
                            RoleId = "704f6694-7020-48f6-bd2c-10e22732c830"
                        },
                        new
                        {
                            UserId = "22e40406-8a9d-2d82-912c-5d6a640ee013",
                            RoleId = "1cc7c608-0e28-4c11-8cd0-7bf6be3a7b48"
                        },
                        new
                        {
                            UserId = "22e40406-8a9d-2d82-912c-5d6a640ee696",
                            RoleId = "0fcba428-3c83-4ca4-b329-32bf4e78ea92"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HrManagementSystem.DataLayer.Entities.ApplicationUser", b =>
                {
                    b.HasOne("HrManagementSystem.DataLayer.Entities.Company", "Company")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("HrManagementSystem.DataLayer.Entities.Certification", b =>
                {
                    b.HasOne("HrManagementSystem.DataLayer.Entities.Resume", "Resume")
                        .WithMany("Certifications")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("HrManagementSystem.DataLayer.Entities.Department", b =>
                {
                    b.HasOne("HrManagementSystem.DataLayer.Entities.Company", "Company")
                        .WithMany("Departments")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("HrManagementSystem.DataLayer.Entities.Education", b =>
                {
                    b.HasOne("HrManagementSystem.DataLayer.Entities.Resume", "Resume")
                        .WithMany("Educations")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("HrManagementSystem.DataLayer.Entities.Employee", b =>
                {
                    b.HasOne("HrManagementSystem.DataLayer.Entities.Company", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HrManagementSystem.DataLayer.Entities.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("HrManagementSystem.DataLayer.Entities.Event", b =>
                {
                    b.HasOne("HrManagementSystem.DataLayer.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("HrManagementSystem.DataLayer.Entities.Expense", b =>
                {
                    b.HasOne("HrManagementSystem.DataLayer.Entities.Employee", "Employee")
                        .WithMany("Expenses")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HrManagementSystem.DataLayer.Entities.Holiday", b =>
                {
                    b.HasOne("HrManagementSystem.DataLayer.Entities.Company", "Company")
                        .WithMany("Holidays")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("HrManagementSystem.DataLayer.Entities.Language", b =>
                {
                    b.HasOne("HrManagementSystem.DataLayer.Entities.Resume", "Resume")
                        .WithMany("Languages")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("HrManagementSystem.DataLayer.Entities.Leave", b =>
                {
                    b.HasOne("HrManagementSystem.DataLayer.Entities.Employee", "Approver")
                        .WithMany()
                        .HasForeignKey("ApproverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrManagementSystem.DataLayer.Entities.Employee", "Employee")
                        .WithMany("Leaves")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HrManagementSystem.DataLayer.Entities.Notification", b =>
                {
                    b.HasOne("HrManagementSystem.DataLayer.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HrManagementSystem.DataLayer.Entities.Employee", "Employee")
                        .WithMany("Notifications")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrManagementSystem.DataLayer.Entities.Employee", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Employee");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("HrManagementSystem.DataLayer.Entities.Resume", b =>
                {
                    b.HasOne("HrManagementSystem.DataLayer.Entities.Employee", "Employee")
                        .WithOne("Resume")
                        .HasForeignKey("HrManagementSystem.DataLayer.Entities.Resume", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HrManagementSystem.DataLayer.Entities.Shift", b =>
                {
                    b.HasOne("HrManagementSystem.DataLayer.Entities.Employee", "Employee")
                        .WithMany("Shifts")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HrManagementSystem.DataLayer.Entities.Skill", b =>
                {
                    b.HasOne("HrManagementSystem.DataLayer.Entities.Resume", "Resume")
                        .WithMany("Skills")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("HrManagementSystem.DataLayer.Entities.WorkExperience", b =>
                {
                    b.HasOne("HrManagementSystem.DataLayer.Entities.Resume", "Resume")
                        .WithMany("WorkExperiences")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HrManagementSystem.DataLayer.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HrManagementSystem.DataLayer.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HrManagementSystem.DataLayer.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HrManagementSystem.DataLayer.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HrManagementSystem.DataLayer.Entities.Company", b =>
                {
                    b.Navigation("ApplicationUsers");

                    b.Navigation("Departments");

                    b.Navigation("Employees");

                    b.Navigation("Holidays");
                });

            modelBuilder.Entity("HrManagementSystem.DataLayer.Entities.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("HrManagementSystem.DataLayer.Entities.Employee", b =>
                {
                    b.Navigation("Expenses");

                    b.Navigation("Leaves");

                    b.Navigation("Notifications");

                    b.Navigation("Resume")
                        .IsRequired();

                    b.Navigation("Shifts");
                });

            modelBuilder.Entity("HrManagementSystem.DataLayer.Entities.Resume", b =>
                {
                    b.Navigation("Certifications");

                    b.Navigation("Educations");

                    b.Navigation("Languages");

                    b.Navigation("Skills");

                    b.Navigation("WorkExperiences");
                });
#pragma warning restore 612, 618
        }
    }
}
